max_and_linux_task:
  env:
    DART_PATH: "/tmp/with spaces/dart"
    FLUTTER_PATH: "/tmp/with spaces/flutter"
    FLUTTER_ROOT: "/tmp/with spaces/flutter"
    PATH: "$FLUTTER_PATH/bin:$DART_PATH/bin:$PATH"
    DEBIAN_FRONTEND: noninteractive
    ELECTRON_NO_ATTACH_CONSOLE: 1

  matrix:
    # - name: Linux, Dart Stable, Code Stable
    #   container:
    #     image: ubuntu:bionic
    #   env:
    #     DART_OS: linux
    #     DART_CHANNEL: stable
    #     FLUTTER_BRANCH: dev
    #     CODE_VERSION: stable
    - name: Mac, Dart Stable, Code Stable
      osx_instance:
        image: high-sierra-base
      env:
        DART_OS: macos
        DART_CHANNEL: stable
        FLUTTER_BRANCH: dev
        CODE_VERSION: stable
    # - name: Windows, Dart Stable, Code Stable
    #   windows_container:
    #     image: cirrusci/windowsservercore:2016
    #   env:
    #     DART_OS: win
    #     DART_CHANNEL: stable
    #     FLUTTER_BRANCH: dev
    #     CODE_VERSION: stable

  pub_cache:
    folder: "$HOME/.pub-cache"
    # Pub cache is unrelated to engine version, but it's a convenient thing that changes now and
    # then which will prevent this cache just growing over time as versions changed.
    fingerprint_script: cat "$FLUTTER_PATH/bin/internal/engine.version"

  node_modules_cache:
    folder: node_modules
    fingerprint_script: cat package-lock.json

  flutter_cache:
    folder: "$FLUTTER_PATH/bin/cache"
    fingerprint_script: cat "$FLUTTER_PATH/bin/internal/engine.version"
  
  install_packages_script: |
    if [[ "$OS" == "linux" ]]; then
      apt-get update
      apt-get -y install curl wget git ruby2.5 gnupg
      curl -sL https://deb.nodesource.com/setup_8.x | bash -
      apt-get -y install nodejs
      gem install dpl
    fi;
    if [[ "$OS" == "darwin" ]]; then
      brew install node
      sudo gem install dpl
    fi;

  vscode_setup_script: |
    if [[ "$OS" == "linux" ]]; then
      curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
      mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
      sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
      apt-get update
      apt-get -y install code code-insiders libasound2 libxkbfile-dev pkg-config libsecret-1-dev libxss1 libgconf-2-4 dbus xvfb libgtk-3-0
      export CXX="g++-4.8" CC="gcc-4.8" DISPLAY=:99.0
      bash -c Xvfb &
    fi;
    
  install_dart_script: |
    mkdir -p "$DART_PATH"
    cd "$DART_PATH"
    curl https://storage.googleapis.com/dart-archive/channels/$DART_CHANNEL/release/latest/sdk/dartsdk-$DART_OS-x64-release.zip > dart-sdk.zip
    unzip dart-sdk.zip > /dev/null
    mv dart-sdk/* .
    cd "$CIRRUS_WORKING_DIR"

  install_flutter_script: &install_flutter |
    mkdir -p "$FLUTTER_PATH"
    cd "$FLUTTER_PATH"
    git clone -b $FLUTTER_BRANCH https://github.com/flutter/flutter.git .
    cd "$CIRRUS_WORKING_DIR"

  configure_flutter_script: &configure_flutter |
    flutter config --no-analytics
    flutter update-packages

  print_versions_script: &print_versions |
    dart --version
    flutter --version
    node --version
    npm --version

  flutter_doctor_script: &flutter_doctor |
    flutter doctor

  install_npm_packages_script: &install_npm_packages |
    npm install --depth 0 --unsafe-perm

  configure_code_climate_script: |
    if [[ "$OS" == "linux" ]]; then
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
    else
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter;
    fi
    chmod +x ./cc-test-reporter;
    ./cc-test-reporter before-build;

  compile_script: &compile |
    npm run vscode:prepublish

  lint_script: &lint |
    npm run lint

  test_script: &test |
    npm test

  ensure_no_dart_processes_script: |
    ps -ax | grep -v grep | grep dart || true
    if [[ $(pgrep -x dart) ]]; then
      echo 'DART WAS FOUND';
      fail();
    fi;

  # upload_logs_script: |
  #   if [[ "$CIRRUS_PR" = "" ]; then
  #     dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".test_results" --upload-dir="$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
  #     dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".dart_code_test_logs" --upload-dir="logs/$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
  #   fi

  # upload_code_coverage_script: |
  #   if [[ "$CODE_VERSION" == "stable" ]] && [[ "$DART_CHANNEL" == "stable" ]]; then
  #     ./cc-test-reporter after-build --prefix ../../;
  #   fi

windows_task:
  env:
    CIRRUS_SHELL: powershell
    DART_PATH: "C:\\Windows\Temp\\with spaces\\dart"
    FLUTTER_PATH: "C:\\Windows\\Temp\\with spaces\\flutter"
    FLUTTER_ROOT: "C:\\Windows\\Temp\\with spaces\\flutter"
    PATH: "$FLUTTER_PATH\\bin:$DART_PATH\\bin:$PATH"
    
  matrix:
    - name: Windows, Dart Stable, Code Stable
      windows_container:
        image: cirrusci/windowsservercore:2016
      env:
        DART_OS: win
        DART_CHANNEL: stable
        FLUTTER_BRANCH: dev
        CODE_VERSION: stable

  pub_cache:
    folder: "$APPDATA\Pub\Cache"
    # Pub cache is unrelated to engine version, but it's a convenient thing that changes now and
    # then which will prevent this cache just growing over time as versions changed.
    fingerprint_script: type "$FLUTTER_PATH\bin\internal\engine.version"

  node_modules_cache:
    folder: node_modules
    fingerprint_script: type package-lock.json

  flutter_cache:
    folder: "$FLUTTER_PATH\bin\cache"
    fingerprint_script: type "$FLUTTER_PATH\bin\internal\engine.version"
  
  # install_packages_script: |
  #   if [[ "$OS" == "linux" ]]; then
  #     apt-get update
  #     apt-get -y install curl wget git ruby2.5 gnupg
  #     curl -sL https://deb.nodesource.com/setup_8.x | bash -
  #     apt-get -y install nodejs
  #     gem install dpl
  #   fi;
  #   if [[ "$OS" == "darwin" ]]; then
  #     brew install node
  #     sudo gem install dpl
  #   fi;

  # vscode_setup_script: |
  #   if [[ "$OS" == "linux" ]]; then
  #     curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
  #     mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
  #     sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
  #     apt-get update
  #     apt-get -y install code code-insiders libasound2 libxkbfile-dev pkg-config libsecret-1-dev libxss1 libgconf-2-4 dbus xvfb libgtk-3-0
  #     export CXX="g++-4.8" CC="gcc-4.8" DISPLAY=:99.0
  #     bash -c Xvfb &
  #   fi;
    
  install_dart_script: |
    mkdir -p "$DART_PATH"
    cd "$DART_PATH"
    Invoke-WebRequest "https://storage.googleapis.com/dart-archive/channels/${env:DART_CHANNEL}/release/latest/sdk/dartsdk-windows-x64-release.zip" -OutFile "dart.zip"
    7z.exe x dart.zip | out-null
    mv dart-sdk/* .
    cd "$CIRRUS_WORKING_DIR"

  install_flutter_script: *install_flutter
  configure_flutter_script: *configure_flutter
  print_versions_script: *print_versions
  flutter_doctor_script: *flutter_doctor
  install_npm_packages_script: *install_npm_packages

  # configure_code_climate_script: |
  #   if [[ "$OS" == "linux" ]]; then
  #     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
  #   else
  #     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter;
  #   fi
  #   chmod +x ./cc-test-reporter;
  #   ./cc-test-reporter before-build;

  compile_script: *compile
  lint_script: *lint
  test_script: *test

  # ensure_no_dart_processes_script: |
  #   ps -ax | grep -v grep | grep dart || true
  #   if [[ $(pgrep -x dart) ]]; then
  #     echo 'DART WAS FOUND';
  #     fail();
  #   fi;

  # upload_logs_script: |
  #   if [[ "$CIRRUS_PR" = "" ]; then
  #     dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".test_results" --upload-dir="$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
  #     dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".dart_code_test_logs" --upload-dir="logs/$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/Cirrus-$OS" --acl=public_read --default_text_charset=utf-8;
  #   fi

  # upload_code_coverage_script: |
  #   if [[ "$CODE_VERSION" == "stable" ]] && [[ "$DART_CHANNEL" == "stable" ]]; then
  #     ./cc-test-reporter after-build --prefix ../../;
  #   fi
